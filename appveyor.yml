environment:

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    ANT_HOME: C:\apache-ant-1.9.4

  matrix:
# with numpy
    - PYTHON: "C:\\Python27"
      PYTHON_ARCH: "32"
      JAVA_HOME: "C:\\Program Files (x86)\\Java\\jdk1.8.0"
      MINGW: "Y" # mingw only supported for 32 bit at appveyor

#    - PYTHON: "C:\\Python27-x64"
#      PYTHON_VERSION: "2.7.8"
#      PYTHON_ARCH: "64"
#      JAVA_HOME: "C:\\Program Files\\Java\\jdk1.8.0"

# opt out numpy 
#    - PYTHON: "C:\\Python27"
#      PYTHON_ARCH: "32"
#      NUMPY: "--disable-numpy"
#      JAVA_HOME: "C:\\Program Files (x86)\\Java\\jdk1.8.0"

#    - PYTHON: "C:\\Python27-x64"
#      PYTHON_ARCH: "64"
#      NUMPY: "--disable-numpy"
#      JAVA_HOME: "C:\\Program Files\\Java\\jdk1.8.0"

install:
  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - "powershell ./appveyor/install.ps1"
  - ls c:\mingw\mingw32
  - ls C:\mingw\mingw32\bin

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%;%ANT_HOME%\\bin;C:\\mingw\\mingw32\\bin"
  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install nose -rtest-requirements.txt"
  # compile java test classes
  - "ant -f test\\build.xml"
  - echo %PATH%
  - where gcc
  
  # Build the compiled extension and run the project tests
  - ps: if ($env:MINGW) {
          python setup.py build_ext -c mingw $env:NUMPY;
          python setup.py install
        } else { cmd "%CMD_IN_ENV% python setup.py install %NUMPY%" }
  
build: false # Not a C# project, build stuff at the test step instead.

test_script:
  # try to start jvm first
  - python -c "import jpype; jpype.startJVM(jpype.getDefaultJVMPath());jpype.java.lang.System.out.println('test123')"
  # run testsuite and upload test results to AppVeyor; return exit code of testsuite
  - "powershell ./appveyor/runTestsuite.ps1"

after_test:
  # If tests are successful, create a whl package for the project.
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
